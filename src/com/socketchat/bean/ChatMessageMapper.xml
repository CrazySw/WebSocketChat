<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ChatMessage">
	<sql id="field">
		chatMessageId, chatMessage, chatImg, chatVideo, chatRadio, chatPosition, fromUserId, toUserId, toChatRoomId, messageSendTime, needRead
	</sql>
	<sql id="insertCM">
		#{chatMessageId}, #{chatMessage}, #{chatImg}, #{chatVideo}, #{chatRadio}, #{chatPosition}, #{fromUserId}, #{toUserId}, #{toChatRoomId}, #{messageSendTime}, #{needRead}
	</sql>
	
	<select id="getOneChatMessage" resultType="ChatMessage" parameterType="_int">
		select * from chatMessage cm where cm.chatMessageId = #{chatMessageId}
	</select>
	<insert id="insertChatMessage" parameterType="ChatMessage">
		insert into chatMessage(chatMessageId, chatMessage, chatImg, chatVideo, chatRadio, chatPosition, fromUserId, toUserId, toChatRoomId, messageSendTime, needRead) values(#{chatMessageId}, #{chatMessage}, #{chatImg}, #{chatVideo}, #{chatRadio}, #{chatPosition}, #{fromUserId}, #{toUserId}, #{toChatRoomId}, #{messageSendTime}, #{needRead})
	</insert>
	<delete id="deleteChatMessage" parameterType="_int">
		delete from chatMessage cm where cm.chatMessageId = #{chatMessageId}
	</delete>
	
	<!-- 将给某人发送过的所有消息全部清空 fromUserId,toUserId-->
	<delete id="emptyChatMessagesByUserIdToSomeOne" parameterType="map">
		delete from chatMessage cm where cm.fromUserId = #{fromUserId} and cm.toUserId = #{toUserId}
	</delete>
	<!-- 将某人给所有人的所有聊天记录清空 -->
	<delete id="emptyChatMessagesByUserId" parameterType="string">
		delete from chatMessage cm where cm.fromUserId = #{fromUserId}
	</delete>
	<!-- 通过两个互相聊天的用户Id，每次获取的开始位置和最大条数，可以获取他们双方的聊天记录  fromUserId,toUserId,start,maxLength-->
	<select id="getHistoryChatMessagesByTwoUserId" parameterType="map" resultType="ChatMessage">
		select * from chatMessage cm where (cm.fromUserId = #{fromUserId} and cm.toUserId = #{toUserId}) or (cm.fromUserId = #{toUserId} and cm.toUserId = #{fromUserId}) order by cm.messageSendTime asc limit #{start},#{maxLength}
	</select>
	
	<!--获取与某人聊天的已读或未读的消息 (String fromUserId, String toUserId, int needRead); -->
	<select id="getNotReadChatMessages" parameterType="map" resultType="ChatMessage">
		select * from chatMessage cm where cm.fromUserId = #{fromUserId} and cm.toUserId = #{toUserId} and cm.needRead = #{needRead}
	</select>
	
	<!-- 消息个数，获取某个用户与另外一个用户，已读或未读的所有消息个数(String fromUserId, String toUserId, int needRead); -->
	<select id="getNotReadChatMessagesCount" parameterType="map" resultType="long">
		select count(*) from chatMessage cm where cm.fromUserId = #{fromUserId} and cm.toUserId = #{toUserId} and cm.needRead = #{needRead}
	</select>
	
	<!--获取某个用户所有被通知的消息的个数。根据已读未读区分 (String userId, int needRead); -->
	<select id="getAllNotReadChatMessageCounts" parameterType="map" resultType="long">
		select * from chatMessage cm where cm.toUserId = #{toUserId} and cm.needRead = #{needRead}
	</select>
	
	<!--获取某个用户,已读或未读的消息的用户的集合(String userId, int needRead);  -->
	<select id="getAllNotReadChatMessages" parameterType="map" resultType="User">
		select * from user u where u.userId in (select distinct fromUserId from chatMessage cm where cm.toUserId = #{toUserId} and cm.needRead = #{needRead})
	</select>
	
	<update id="updateChatMessage" parameterType="string">
		update chatMessage cm set cm.needRead = 1 where cm.chatMessageId = #{chatMessageId}
	</update>
</mapper>

